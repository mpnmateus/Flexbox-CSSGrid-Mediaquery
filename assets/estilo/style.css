

body, ul, li, p{
    /*Resetando e dando estilos gerais*/
    margin: 0px;
    padding: 0px;
    list-style: none; /*Tirar as bolinhas*/
    font-size: 1.2rem;
    font-family: Arial, Helvetica, sans-serif;
}

a {
    text-decoration: none; /*tirando o sublinhado*/
    color: white;
}

h1 {
    text-align: center;
    margin-top: 40px;
}

.sections {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-content: center;
    text-align: center;
    margin: 100px auto;
}

.sections li a{
    color: white;
    background-color: black;
    text-align: center;
    border: 2px solid black;
    border-radius: 5px;
    padding: 10px;
    margin: 20px;
    flex: 0 1 200px;
}

.voltar{
    display: inline-block;
    text-align: right;
}

.voltar > a {
    color: white;
    background-color: black;
    text-align: center;
    border: 2px solid black;
    border-radius: 5px;
    padding: 5px;
    

}

img{
    max-width: 100%; /*Pegam até o máx de 100%, se expandem até o tam máximo delas, mesmo alterando tamanho do dispositivo*/
    display: block;
}

.header {
    background-color: black;
    display: flex; /*um flexitem de um lado e outro de outro*/
    flex-wrap: wrap; /*Quando a tela ficar bem pequena, a parte da direita do flexbox vai para baixo do logo (quebra de linha)*/
    justify-content: space-between; /*espaço entre eles*/
    align-items: center; /*Alinhando os flex-itens a*/
    padding: 20px;
}

.menu {
    /*Esse menu será outro flex item (ficará um ao lado do outro)*/
    display: flex;
}

.menu li {
    margin-left: 10px; /*não dou mais pois vou declarar um padding para o a do li - isso ajuda a aumentar a área de clique também, facilitando inclusive no mobile*/

}

.menu li a {
    display: block; 
    padding: 10px;
}

/*CSS FLEXBOX 1*/

.flex{
    display: flex; /*Os itens um do lado do outro*/
    flex-wrap: wrap; /*tem o tam mín de 200px e vai quebrando ajustando-se à tela*/
    max-width: 800px; /*Segurar o container: ao invés de deixá-lo livre. O ideal é que seja a mesma largura que irei utilizar nos outro itens do site*/
    margin: 0 auto; /*Alinhar ao centro quando passar dos 800px*/
}

.flex > div { /*A div que está dentro do flex, que é o flex item*/
    flex: 1 1 200px; /*tamanho mínimo: 200px. sempre terá que ter essa base e, se não conseguir, vai quebrar*/
    margin: 10px; /*margem entre os flexitens. 10 pra um lado, 10 pro outro. 20px de gap entr um item e outro*/
    
}

/* CSS GRID LAYOUT 1*/

.grid1 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;/*Quantas colunas eu quero que essa grid tenha. fr: unidade fracional. aqui, é como se estivéssemos dividindo 100% em 3 partes (33,33% +-)*/
    /*grid-template-columns: repeat(3, 1fr); shorthand com função: Repetir três vezes o 1fr*/
    max-width: 780px; /*Segurar o container / resolvendo o problema de alinhamento: no gridlayout, o container tem seus itens vazando 10 pixels, pq o grid gap foi configurado em 20 px (10px pra casa lado); assim, diminuir a largura do container do grid layout num total de 20px (estava em 800px)*/
    margin: 0 auto; /*Colocando no centro*/
    grid-gap: 20px; /*espaçamento entre os itens. Não preciso ficar colocando margem entre os itens*/
}